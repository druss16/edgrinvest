services:
  nginx:
    image: nginx:latest
    container_name: edgr-nginx
    restart: always
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./staticfiles:/app/staticfiles
    depends_on:
      - django-web
      - frontend
    networks:
      edgr-network:
        aliases:
          - nginx
    deploy:
      resources:
        limits:
          memory: "256m"

  django-web:
    build:
      context: .
      dockerfile: Dockerfile.local
    platform: linux/amd64
    container_name: edgr-django-web
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=edgr_invest.settings.base
    expose:
      - 8000
    volumes:
      - ./staticfiles:/app/staticfiles
      - .:/app
    env_file:
      - .env
    shm_size: '2gb'
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 edgr_invest.wsgi:application"
    depends_on:
      db:
        condition: service_healthy
    networks:
      edgr-network:
        aliases:
          - django-web
    dns:
      - 8.8.8.8  # Google DNS primary
      - 8.8.4.4  # Google DNS secondary
      - 1.1.1.1  # Cloudflare DNS primary
      - 1.0.0.1  # Cloudflare DNS secondary
      - 9.9.9.9  # Quad9 DNS primary
    healthcheck:
      test: ["CMD", "python", "-c", "import django; django.setup(); from django.db import connection; connection.ensure_connection() || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: edgr-frontend
    restart: always
    expose:
      - 80
    volumes:
      - ./frontend:/app
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    depends_on:
      - django-web
    networks:
      edgr-network:
        aliases:
          - frontend
    deploy:
      resources:
        limits:
          memory: "256m"

  db:
    image: postgres:latest
    container_name: edgr-db
    restart: always
    environment:
      - POSTGRES_DB=edgr_db
      - POSTGRES_USER=edgr_user
      - POSTGRES_PASSWORD=edgr_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      edgr-network:
        aliases:
          - db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "edgr_user", "-d", "edgr_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: "512m"

  redis:
    image: redis:latest
    container_name: edgr-redis
    restart: always
    volumes:
      - redis-data:/data
    networks:
      edgr-network:
        aliases:
          - redis
    deploy:
      resources:
        limits:
          memory: "256m"

networks:
  edgr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  redis-data:
  postgres-data:
  static_volume: